generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                          String                        @id @unique
  email                       String                        @unique
  role                        Role                          @default(USER)
  valid                       Boolean
  passwordVerificationRequest PasswordVerificationRequest[]
  emailVerificationRequest    EmailVerificationRequest[]
  key                         Key[]
  profile                     Profile?
  session                     Session[]

  @@map("user")
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("session")
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  primary         Boolean
  user            User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("key")
}

model Profile {
  id        String     @id @default(uuid())
  user_id   String     @unique
  postalZip String
  firstName String
  lastName  String
  country   String
  birthday  String
  phone     String
  ChildId   ChildId[]
  myneCard  MyneCard[]
  user      User       @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("profile")
}

model MyneCard {
  id                       String    @id @default(uuid())
  user_id                  String
  size                     String?
  purchasedFrom            String?
  purchasedValue           String?
  createdOn                DateTime  @default(now())
  isStolen                 Boolean   @default(false)
  reportedStolenDate       DateTime?
  pictures                 String[]  @default([])
  category                 String
  description              String?
  breed                    String?
  artist                   String?
  author                   String?
  body_length              String?
  brand_reference          String?
  brand                    String?
  cOfAuth                  String?
  caliber                  String?
  case_material            String?
  clarity                  String?
  color                    String?
  crypto_token_address     String?
  date                     String?
  dial                     String?
  distinguishing_features  String?
  dob                      String?
  document                 String?
  drivetrain               String?
  engine                   String?
  engraving                String?
  exchange_address         String?
  exterior_color           String?
  fuel_type                String?
  grading                  String?
  grading_reports          String?
  height                   String?
  hotstamping              String?
  interior_color           String?
  invoice                  String?
  isHeirloom               Boolean   @default(false)
  laser_inscription        String?
  manufacturer             String?
  material                 String?
  microchip                String?
  mileage                  String?
  model                    String?
  model_yr                 String?
  movement_caliber         String?
  other                    String?
  pedigree                 String?
  product                  String?
  registration_certificate String?
  release_date             String?
  serial                   String?
  serie                    String?
  series                   String?
  shape                    String?
  smart_contract_address   String?
  smart_contract_id        String?
  stock_number             String?
  stone                    String?
  strap_bracelet           String?
  subcategory              String?
  tattoo                   String?
  trademarks               String?
  transaction              String?
  transmission             String?
  unique_features          String?
  url                      String?
  valuation_report         String?
  vin                      String?
  weight                   String?
  year                     String?
  cut_shape                String?
  carat_weight             String?
  marketPrice              String?   @default("No market data yet")
  gender                   String?
  wallet_address           String?
  document_array           String?
  Profile                  Profile   @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([user_id, id])
  @@map("myneCard")
}

model ChildId {
  id                String   @id @unique @default(uuid())
  user_id           String
  childIdFirstName  String
  childIdMiddleName String?
  childIdLastName   String
  eye_color         String
  hair_color        String
  height            String
  parentOneName     String
  parentTwoName     String
  contactNumberOne  String
  contactNumberTwo  String
  age               String
  dob               String
  weight            String
  blood_type        String
  prescription      String[]
  allergies         String
  physicalTraits    String[]
  medicalConditions String[]
  gender            String
  race              String
  homeAddress       String
  homeCity          String
  homeState         String
  homeZIP           String
  homeCountry       String
  Profile           Profile  @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model EmailVerificationRequest {
  id        String   @id @unique
  email     String
  token     String   @unique @default(uuid())
  user_id   String
  expiresAt DateTime
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("emailVerificationRequest")
}

model PasswordVerificationRequest {
  id        String   @id @unique
  token     String   @default(uuid())
  user_id   String
  expiresAt DateTime @db.Timestamp(1)
  email     String
  user      User     @relation(fields: [user_id], references: [id])
}

model stolenWatches {
  brand             String?
  reference_        String? @map("reference ")
  model             String?
  serialNumber      String? @unique(map: "stolenWatches_caseSerialNumber_key")
  description       String?
  city              String?
  state             String?
  country           String?
  stolenDate        String?
  policeReference   String?
  interpolReference String?
  origin            String?
  id                Int     @id @unique @default(autoincrement())
}

model automobile_brands {
  automobile_brands String?
  id                BigInt  @id @unique @default(autoincrement())
}

model bird_breeds {
  bird_breeds String?
  id          BigInt  @id @unique @default(autoincrement())
}

model cat_breeds {
  cat_breeds String?
  id         BigInt  @id @unique @default(autoincrement())
}

model coin_brands {
  coin_brands String?
  id          BigInt  @id @unique @default(autoincrement())
}

model dog_breeds {
  dog_breeds String?
  id         BigInt  @id @unique @default(autoincrement())
}

model firearms_brands {
  firearms_brands String?
  id              BigInt  @id @unique @default(autoincrement())
}

model leather_brands {
  leather_brands String?
  id             BigInt  @id @unique @default(autoincrement())
}

model motorcycle_brands {
  motorcycle_brands String?
  id                BigInt  @id @unique @default(autoincrement())
}

model technology_brands {
  technology_brands String?
  id                BigInt  @id @unique @default(autoincrement())
}

model token_brands {
  token_brands String?
  id           BigInt  @id @unique @default(autoincrement())
}

model watch_brands {
  watch_brands String?
  id           BigInt  @id @unique @default(autoincrement())
}

model jewelry_brands {
  jewelry_brands String?
  id             BigInt  @id(map: "jewlery_brands_pkey") @unique(map: "jewlery_brands_id_key") @default(autoincrement())
}

model countries {
  id         BigInt      @id @default(autoincrement())
  name       String?
  iso2       String
  iso3       String?
  local_name String?
  continent  continents?
}

enum continents {
  Africa
  Antarctica
  Asia
  Europe
  Oceania
  North_America @map("North America")
  South_America @map("South America")
}

enum Role {
  OWNR
  USER
  ADMIN
  DISTR
}
